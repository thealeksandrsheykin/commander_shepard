# -*- coding: utf-8 -*-
# !/usr/bin/env python3

"""
1. Перенесите глобальный счетчик на уровень объемлющей функции. Будет ли работать наш код? Если да, то как поменялся смысл
написанного кода? Если нет, то что надо изменить, чтобы всё заработало?
"""


def outer():
    print(f'Функция "{outer.__name__}" и ее указатель на ячейку в памяти: {outer} ')
    #cnt = 0
    outer.cnt = 0

    def inner(a: int, b: int) -> int:
        #nonlocal cnt
        #cnt += 1
        outer.cnt += 1
        print(f'Функция "{inner.__name__}" и ее указатель на ячейку в памяти: {inner} ')
        print(f'Функция "{inner.__name__}" запускается {outer.cnt} раз.')
        return a + b

    return inner


if __name__ == '__main__':
    function = outer()
    """
    Если перенести глобальную переменную "сnt" на уровень объемлющей функции и пытаться изменить данный счетчик
    во вложенной функции, то будет ошибка типа: "UnboundLocalError: cannot access local variable 'cnt' where it is not 
    associated with a value". То есть получается, что когда функция "inner"  не находит в своей области видимости переменную
    "cnt", то она идет во внешнюю функцию и ищет ее там и не находит ее там тоже. 
    Можно добавить атрибут функции "outer" (outer.cnt)  и изменять его во внутренней функции "inner". Или наоборот после 
    объявления внутренней функции задать атрибут и менять его также во внутренней функции "inner". Или сделать переменную
    nonlocal.
    """
    print(f'Результат: 2 + 4 = {function(2, 4)}')
    print(f'Результат: 3 + 5 = {function(3, 5)}')



